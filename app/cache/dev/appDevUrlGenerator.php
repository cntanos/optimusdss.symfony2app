<?php

use Symfony\Component\Routing\RequestContext;
use Symfony\Component\Routing\Exception\RouteNotFoundException;
use Psr\Log\LoggerInterface;

/**
 * appDevUrlGenerator
 *
 * This class has been auto-generated
 * by the Symfony Routing Component.
 */
class appDevUrlGenerator extends Symfony\Component\Routing\Generator\UrlGenerator
{
    private static $declaredRoutes = array(
        '_wdt' => array (  0 =>   array (    0 => 'token',  ),  1 =>   array (    '_controller' => 'web_profiler.controller.profiler:toolbarAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'token',    ),    1 =>     array (      0 => 'text',      1 => '/_wdt',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        '_profiler_home' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'web_profiler.controller.profiler:homeAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/_profiler/',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        '_profiler_search' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'web_profiler.controller.profiler:searchAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/_profiler/search',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        '_profiler_search_bar' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'web_profiler.controller.profiler:searchBarAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/_profiler/search_bar',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        '_profiler_purge' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'web_profiler.controller.profiler:purgeAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/_profiler/purge',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        '_profiler_info' => array (  0 =>   array (    0 => 'about',  ),  1 =>   array (    '_controller' => 'web_profiler.controller.profiler:infoAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'about',    ),    1 =>     array (      0 => 'text',      1 => '/_profiler/info',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        '_profiler_phpinfo' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'web_profiler.controller.profiler:phpinfoAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/_profiler/phpinfo',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        '_profiler_search_results' => array (  0 =>   array (    0 => 'token',  ),  1 =>   array (    '_controller' => 'web_profiler.controller.profiler:searchResultsAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/search/results',    ),    1 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'token',    ),    2 =>     array (      0 => 'text',      1 => '/_profiler',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        '_profiler' => array (  0 =>   array (    0 => 'token',  ),  1 =>   array (    '_controller' => 'web_profiler.controller.profiler:panelAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'token',    ),    1 =>     array (      0 => 'text',      1 => '/_profiler',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        '_profiler_router' => array (  0 =>   array (    0 => 'token',  ),  1 =>   array (    '_controller' => 'web_profiler.controller.router:panelAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/router',    ),    1 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'token',    ),    2 =>     array (      0 => 'text',      1 => '/_profiler',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        '_profiler_exception' => array (  0 =>   array (    0 => 'token',  ),  1 =>   array (    '_controller' => 'web_profiler.controller.exception:showAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/exception',    ),    1 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'token',    ),    2 =>     array (      0 => 'text',      1 => '/_profiler',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        '_profiler_exception_css' => array (  0 =>   array (    0 => 'token',  ),  1 =>   array (    '_controller' => 'web_profiler.controller.exception:cssAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/exception.css',    ),    1 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'token',    ),    2 =>     array (      0 => 'text',      1 => '/_profiler',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        '_configurator_home' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'Sensio\\Bundle\\DistributionBundle\\Controller\\ConfiguratorController::checkAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/_configurator/',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        '_configurator_step' => array (  0 =>   array (    0 => 'index',  ),  1 =>   array (    '_controller' => 'Sensio\\Bundle\\DistributionBundle\\Controller\\ConfiguratorController::stepAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'index',    ),    1 =>     array (      0 => 'text',      1 => '/_configurator/step',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        '_configurator_final' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'Sensio\\Bundle\\DistributionBundle\\Controller\\ConfiguratorController::finalAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/_configurator/final',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        '_twig_error_test' => array (  0 =>   array (    0 => 'code',    1 => '_format',  ),  1 =>   array (    '_controller' => 'twig.controller.preview_error:previewErrorPageAction',    '_format' => 'html',  ),  2 =>   array (    'code' => '\\d+',  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '.',      2 => '[^/]++',      3 => '_format',    ),    1 =>     array (      0 => 'variable',      1 => '/',      2 => '\\d+',      3 => 'code',    ),    2 =>     array (      0 => 'text',      1 => '/_error',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'login' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'Optimus\\OptimusBundle\\Controller\\LoginController::loginAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/login',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'login_check' => array (  0 =>   array (  ),  1 =>   array (  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/login_check',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'logout' => array (  0 =>   array (  ),  1 =>   array (  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/logout',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'homepage' => array (  0 =>   array (    0 => 'from',    1 => 'to',    2 => 'timeSelected',  ),  1 =>   array (    '_controller' => 'Optimus\\OptimusBundle\\Controller\\HistoricController::indexAction',    'from' => '',    'to' => '',    'timeSelected' => '',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'timeSelected',    ),    1 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'to',    ),    2 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'from',    ),    3 =>     array (      0 => 'text',      1 => '/home',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'prediction' => array (  0 =>   array (    0 => 'idBuilding',    1 => 'from',    2 => 'to',  ),  1 =>   array (    '_controller' => 'Optimus\\OptimusBundle\\Controller\\PredictionController::indexAction',    'from' => '',    'to' => '',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'to',    ),    1 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'from',    ),    2 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'idBuilding',    ),    3 =>     array (      0 => 'text',      1 => '/prediction',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'newPrediction' => array (  0 =>   array (    0 => 'idBuilding',    1 => 'from',    2 => 'to',  ),  1 =>   array (    '_controller' => 'Optimus\\OptimusBundle\\Controller\\PredictionController::newPredictionAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'to',    ),    1 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'from',    ),    2 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'idBuilding',    ),    3 =>     array (      0 => 'text',      1 => '/new-prediction',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'sensor' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'Optimus\\OptimusBundle\\Controller\\SensorController::indexAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/sensor',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'actionPlan' => array (  0 =>   array (    0 => 'idBuilding',    1 => 'from',    2 => 'to',    3 => 'timeSelected',  ),  1 =>   array (    '_controller' => 'Optimus\\OptimusBundle\\Controller\\PVActionPlanController::indexAction',    'from' => '',    'to' => '',    'timeSelected' => '',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'timeSelected',    ),    1 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'to',    ),    2 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'from',    ),    3 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'idBuilding',    ),    4 =>     array (      0 => 'text',      1 => '/action-plan',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'newCalculate' => array (  0 =>   array (    0 => 'idBuilding',    1 => 'from',    2 => 'to',  ),  1 =>   array (    '_controller' => 'Optimus\\OptimusBundle\\Controller\\PVActionPlanController::newCalculateAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'to',    ),    1 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'from',    ),    2 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'idBuilding',    ),    3 =>     array (      0 => 'text',      1 => '/new-calculate',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'changePVStatusDay' => array (  0 =>   array (    0 => 'idOutputDay',  ),  1 =>   array (    '_controller' => 'Optimus\\OptimusBundle\\Controller\\PVActionPlanController::changeStatusDayAction',  ),  2 =>   array (    '_method' => 'post',  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'idOutputDay',    ),    1 =>     array (      0 => 'text',      1 => '/change-status',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'changePVStrategy' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'Optimus\\OptimusBundle\\Controller\\PVActionPlanController::changeStrategyAction',  ),  2 =>   array (    '_method' => 'post',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/change-strategy',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'init' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'Optimus\\OptimusBundle\\Controller\\InitController::indexAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/init',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'selectOptions' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'Optimus\\OptimusBundle\\Controller\\InitController::selectOptionsAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/select-options',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'selectGraph' => array (  0 =>   array (    0 => 'idBuilding',  ),  1 =>   array (    '_controller' => 'Optimus\\OptimusBundle\\Controller\\InitController::selectGraphAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'idBuilding',    ),    1 =>     array (      0 => 'text',      1 => '/select-graph',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'adminBuilding' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'Optimus\\OptimusBundle\\Controller\\BuildingController::indexAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/admin-buildings',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'building_create' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'Optimus\\OptimusBundle\\Controller\\BuildingController::createAction',  ),  2 =>   array (    '_method' => 'post',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/building-create',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'building_delete' => array (  0 =>   array (    0 => 'idBuilding',  ),  1 =>   array (    '_controller' => 'Optimus\\OptimusBundle\\Controller\\BuildingController::deleteAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'idBuilding',    ),    1 =>     array (      0 => 'text',      1 => '/building-delete',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'building_save' => array (  0 =>   array (    0 => 'idBuilding',  ),  1 =>   array (    '_controller' => 'Optimus\\OptimusBundle\\Controller\\BuildingController::saveAction',  ),  2 =>   array (    '_method' => 'post',  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'idBuilding',    ),    1 =>     array (      0 => 'text',      1 => '/building-save',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'globalConfigBuilding' => array (  0 =>   array (    0 => 'idBuilding',  ),  1 =>   array (    '_controller' => 'Optimus\\OptimusBundle\\Controller\\BuildingController::globalConfigBuildingAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'idBuilding',    ),    1 =>     array (      0 => 'text',      1 => '/configuration-building',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'building_description' => array (  0 =>   array (    0 => 'idBuilding',  ),  1 =>   array (    '_controller' => 'Optimus\\OptimusBundle\\Controller\\BuildingController::descriptionAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'idBuilding',    ),    1 =>     array (      0 => 'text',      1 => '/building-description',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'adminPartitions' => array (  0 =>   array (    0 => 'idBuilding',  ),  1 =>   array (    '_controller' => 'Optimus\\OptimusBundle\\Controller\\PartitionController::indexAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'idBuilding',    ),    1 =>     array (      0 => 'text',      1 => '/admin-partitions',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'createPartition' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'Optimus\\OptimusBundle\\Controller\\PartitionController::createAction',  ),  2 =>   array (    '_method' => 'post',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/partition-create',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'deletePartition' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'Optimus\\OptimusBundle\\Controller\\PartitionController::deleteAction',  ),  2 =>   array (    '_method' => 'post',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/partition-delete',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'adminSensors' => array (  0 =>   array (    0 => 'idBuilding',  ),  1 =>   array (    '_controller' => 'Optimus\\OptimusBundle\\Controller\\SensorController::getAdminSensorsAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'idBuilding',    ),    1 =>     array (      0 => 'text',      1 => '/admin-sensors',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'sensor_create' => array (  0 =>   array (    0 => 'idBuilding',  ),  1 =>   array (    '_controller' => 'Optimus\\OptimusBundle\\Controller\\SensorController::createAction',  ),  2 =>   array (    '_method' => 'post',  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'idBuilding',    ),    1 =>     array (      0 => 'text',      1 => '/sensor-create',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'sensor_save' => array (  0 =>   array (    0 => 'idBuilding',    1 => 'idSensor',  ),  1 =>   array (    '_controller' => 'Optimus\\OptimusBundle\\Controller\\SensorController::saveAction',  ),  2 =>   array (    '_method' => 'post',  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'idSensor',    ),    1 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'idBuilding',    ),    2 =>     array (      0 => 'text',      1 => '/sensor-save',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'sensor_delete' => array (  0 =>   array (    0 => 'idBuilding',    1 => 'idSensor',  ),  1 =>   array (    '_controller' => 'Optimus\\OptimusBundle\\Controller\\SensorController::deleteAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'idSensor',    ),    1 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'idBuilding',    ),    2 =>     array (      0 => 'text',      1 => '/sensor-delete',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'adminActionPlans' => array (  0 =>   array (    0 => 'idBuilding',  ),  1 =>   array (    '_controller' => 'Optimus\\OptimusBundle\\Controller\\AdminActionPlanController::adminActionPlansAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'idBuilding',    ),    1 =>     array (      0 => 'text',      1 => '/admin-action-plans',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'actionPlan_mapping' => array (  0 =>   array (    0 => 'idBuilding',    1 => 'idActionPlan',  ),  1 =>   array (    '_controller' => 'Optimus\\OptimusBundle\\Controller\\APSensorsController::mappingAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'idActionPlan',    ),    1 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'idBuilding',    ),    2 =>     array (      0 => 'text',      1 => '/actionPlan-mapping',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'sensorPartition_create' => array (  0 =>   array (    0 => 'idBuilding',    1 => 'idActionPlan',  ),  1 =>   array (    '_controller' => 'Optimus\\OptimusBundle\\Controller\\APSensorsController::addSensorPartitionAction',  ),  2 =>   array (    '_method' => 'post',  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'idActionPlan',    ),    1 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'idBuilding',    ),    2 =>     array (      0 => 'text',      1 => '/sensorPartition-create',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'sensorPartition_delete' => array (  0 =>   array (    0 => 'idBuilding',    1 => 'idActionPlan',    2 => 'idSensorPartition',  ),  1 =>   array (    '_controller' => 'Optimus\\OptimusBundle\\Controller\\APSensorsController::deleteSensorPartitionAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'idSensorPartition',    ),    1 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'idActionPlan',    ),    2 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'idBuilding',    ),    3 =>     array (      0 => 'text',      1 => '/sensorPartition-delete',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'sensorPartition_save' => array (  0 =>   array (    0 => 'idBuilding',    1 => 'idActionPlan',    2 => 'idSensorPartition',  ),  1 =>   array (    '_controller' => 'Optimus\\OptimusBundle\\Controller\\APSensorsController::saveSensorPartitionAction',  ),  2 =>   array (    '_method' => 'post',  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'idSensorPartition',    ),    1 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'idActionPlan',    ),    2 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'idBuilding',    ),    3 =>     array (      0 => 'text',      1 => '/sensorPartition-save',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'view_switchOnOff' => array (  0 =>   array (    0 => 'idBuilding',  ),  1 =>   array (    '_controller' => 'Optimus\\OptimusBundle\\Controller\\SwitchActionPlanController::indexAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'idBuilding',    ),    1 =>     array (      0 => 'text',      1 => '/view-switch-On-Off',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'changeSwitchStatusDay' => array (  0 =>   array (    0 => 'idOutputDay',  ),  1 =>   array (    '_controller' => 'Optimus\\OptimusBundle\\Controller\\SwitchActionPlanController::changeStatusDayAction',  ),  2 =>   array (    '_method' => 'post',  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'idOutputDay',    ),    1 =>     array (      0 => 'text',      1 => '/change-status',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'changeSwitchStrategy' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'Optimus\\OptimusBundle\\Controller\\SwitchActionPlanController::changeStrategyAction',  ),  2 =>   array (    '_method' => 'post',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/change-strategy',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
    );

    /**
     * Constructor.
     */
    public function __construct(RequestContext $context, LoggerInterface $logger = null)
    {
        $this->context = $context;
        $this->logger = $logger;
    }

    public function generate($name, $parameters = array(), $referenceType = self::ABSOLUTE_PATH)
    {
        if (!isset(self::$declaredRoutes[$name])) {
            throw new RouteNotFoundException(sprintf('Unable to generate a URL for the named route "%s" as such route does not exist.', $name));
        }

        list($variables, $defaults, $requirements, $tokens, $hostTokens, $requiredSchemes) = self::$declaredRoutes[$name];

        return $this->doGenerate($variables, $defaults, $requirements, $tokens, $parameters, $name, $referenceType, $hostTokens, $requiredSchemes);
    }
}
