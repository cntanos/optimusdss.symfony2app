<?php

namespace Proxies\__CG__\Optimus\OptimusBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Sensor extends \Optimus\OptimusBundle\Entity\Sensor implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array();



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return array('__isInitialized__', '' . "\0" . 'Optimus\\OptimusBundle\\Entity\\Sensor' . "\0" . 'id', '' . "\0" . 'Optimus\\OptimusBundle\\Entity\\Sensor' . "\0" . 'name', '' . "\0" . 'Optimus\\OptimusBundle\\Entity\\Sensor' . "\0" . 'url', '' . "\0" . 'Optimus\\OptimusBundle\\Entity\\Sensor' . "\0" . 'color', '' . "\0" . 'Optimus\\OptimusBundle\\Entity\\Sensor' . "\0" . 'display', 'fk_Building', '' . "\0" . 'Optimus\\OptimusBundle\\Entity\\Sensor' . "\0" . 'urlService', '' . "\0" . 'Optimus\\OptimusBundle\\Entity\\Sensor' . "\0" . 'status', '' . "\0" . 'Optimus\\OptimusBundle\\Entity\\Sensor' . "\0" . 'lastData', '' . "\0" . 'Optimus\\OptimusBundle\\Entity\\Sensor' . "\0" . 'description', '' . "\0" . 'Optimus\\OptimusBundle\\Entity\\Sensor' . "\0" . 'units', '' . "\0" . 'Optimus\\OptimusBundle\\Entity\\Sensor' . "\0" . 'predictionmodelparameters', '' . "\0" . 'Optimus\\OptimusBundle\\Entity\\Sensor' . "\0" . 'aggregation');
        }

        return array('__isInitialized__', '' . "\0" . 'Optimus\\OptimusBundle\\Entity\\Sensor' . "\0" . 'id', '' . "\0" . 'Optimus\\OptimusBundle\\Entity\\Sensor' . "\0" . 'name', '' . "\0" . 'Optimus\\OptimusBundle\\Entity\\Sensor' . "\0" . 'url', '' . "\0" . 'Optimus\\OptimusBundle\\Entity\\Sensor' . "\0" . 'color', '' . "\0" . 'Optimus\\OptimusBundle\\Entity\\Sensor' . "\0" . 'display', 'fk_Building', '' . "\0" . 'Optimus\\OptimusBundle\\Entity\\Sensor' . "\0" . 'urlService', '' . "\0" . 'Optimus\\OptimusBundle\\Entity\\Sensor' . "\0" . 'status', '' . "\0" . 'Optimus\\OptimusBundle\\Entity\\Sensor' . "\0" . 'lastData', '' . "\0" . 'Optimus\\OptimusBundle\\Entity\\Sensor' . "\0" . 'description', '' . "\0" . 'Optimus\\OptimusBundle\\Entity\\Sensor' . "\0" . 'units', '' . "\0" . 'Optimus\\OptimusBundle\\Entity\\Sensor' . "\0" . 'predictionmodelparameters', '' . "\0" . 'Optimus\\OptimusBundle\\Entity\\Sensor' . "\0" . 'aggregation');
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Sensor $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', array());
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', array());
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', array());

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setName($name)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setName', array($name));

        return parent::setName($name);
    }

    /**
     * {@inheritDoc}
     */
    public function getName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getName', array());

        return parent::getName();
    }

    /**
     * {@inheritDoc}
     */
    public function setUrl($url)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUrl', array($url));

        return parent::setUrl($url);
    }

    /**
     * {@inheritDoc}
     */
    public function getUrl()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUrl', array());

        return parent::getUrl();
    }

    /**
     * {@inheritDoc}
     */
    public function setColor($color)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setColor', array($color));

        return parent::setColor($color);
    }

    /**
     * {@inheritDoc}
     */
    public function getColor()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getColor', array());

        return parent::getColor();
    }

    /**
     * {@inheritDoc}
     */
    public function setDisplay($display)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDisplay', array($display));

        return parent::setDisplay($display);
    }

    /**
     * {@inheritDoc}
     */
    public function getDisplay()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDisplay', array());

        return parent::getDisplay();
    }

    /**
     * {@inheritDoc}
     */
    public function setFkBuilding(\Optimus\OptimusBundle\Entity\Building $fkBuilding = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setFkBuilding', array($fkBuilding));

        return parent::setFkBuilding($fkBuilding);
    }

    /**
     * {@inheritDoc}
     */
    public function getFkBuilding()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFkBuilding', array());

        return parent::getFkBuilding();
    }

    /**
     * {@inheritDoc}
     */
    public function setUrlService($urlService)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUrlService', array($urlService));

        return parent::setUrlService($urlService);
    }

    /**
     * {@inheritDoc}
     */
    public function getUrlService()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUrlService', array());

        return parent::getUrlService();
    }

    /**
     * {@inheritDoc}
     */
    public function setStatus($status)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setStatus', array($status));

        return parent::setStatus($status);
    }

    /**
     * {@inheritDoc}
     */
    public function getStatus()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getStatus', array());

        return parent::getStatus();
    }

    /**
     * {@inheritDoc}
     */
    public function setLastData($lastData)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLastData', array($lastData));

        return parent::setLastData($lastData);
    }

    /**
     * {@inheritDoc}
     */
    public function getLastData()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLastData', array());

        return parent::getLastData();
    }

    /**
     * {@inheritDoc}
     */
    public function setDescription($description)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDescription', array($description));

        return parent::setDescription($description);
    }

    /**
     * {@inheritDoc}
     */
    public function getDescription()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDescription', array());

        return parent::getDescription();
    }

    /**
     * {@inheritDoc}
     */
    public function setUnits($units)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUnits', array($units));

        return parent::setUnits($units);
    }

    /**
     * {@inheritDoc}
     */
    public function getUnits()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUnits', array());

        return parent::getUnits();
    }

    /**
     * {@inheritDoc}
     */
    public function setPredictionmodelparameters($predictionmodelparameters)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPredictionmodelparameters', array($predictionmodelparameters));

        return parent::setPredictionmodelparameters($predictionmodelparameters);
    }

    /**
     * {@inheritDoc}
     */
    public function getPredictionmodelparameters()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPredictionmodelparameters', array());

        return parent::getPredictionmodelparameters();
    }

    /**
     * {@inheritDoc}
     */
    public function setAggregation($aggregation)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAggregation', array($aggregation));

        return parent::setAggregation($aggregation);
    }

    /**
     * {@inheritDoc}
     */
    public function getAggregation()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAggregation', array());

        return parent::getAggregation();
    }

}
