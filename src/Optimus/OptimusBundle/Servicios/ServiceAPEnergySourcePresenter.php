<?php

namespace Optimus\OptimusBundle\Servicios;

use Symfony\Component\Config\FileLocator;
use Doctrine\ORM\EntityManager;



class ServiceAPEnergySourcePresenter {

    protected $em;
    
	// Sensors
	//protected $ontologia;
	//protected $invokePredictData; 
	protected $events;
	private static $sensor_1_airtemperature_name = "Air temperature (forecast) (C)";	
	private static $sensor_2_relativehumidity_name = "Relative humidity (forecast) (%)";	
	private static $sensor_3_airpressure_name = "Air pressure (forecast) (mbar)";	
    private static $sensor_4_solarradiation_name = "Solar radiation (forecast) (W/m2)";	
    private static $sensor_5_energyproduction_name = "Energy production (Kwh)";	
	private static $sensor_6_powerexchangednetwork_name = "Electrical power exchanged with the external network (Kwh)";	
	private static $sensor_7_powerexchangedfiamm_name = "Electrical power exchanged by the FIAMM SoNick storage system (Kwh)";	
    private static $sensor_8_electricaldualmodemicroturbine_name = "Electrical power generated by the dual mode Capstone microturbine (Kwh)";	
    private static $sensor_9_electricalgridmicroturbine_name = "Electrical power generated by the grid connected Capstone microturbine (Kwh)";	
    private static $sensor_10_thermaldualmodemicroturbine_name = "Thermal power delivered by the dual mode Capstone microturbine (Kwh)";	
    private static $sensor_11_thermalgridmicroturbine_name = "Thermal power delivered by the the grid connected Capstone microturbine (Kwh)";	
    private static $sensor_12_thermalboilers_name = "Thermal power delivered by the boilers (Kwh)";
	
	//private static $sensor_PV_rad = "PV_rad";	
	//private static $sensor_PV_Pel = "PV_Pel"; 
	//private static $sensor_CHP_C65B_Pel = "CHP_C65B_Pel"; 
	//private static $sensor_CHP_C65_Pel = "CHP_C65_Pel";
	//private static $sensor_STO_Pel = "STO_Pe";
	//private static $sensor_NET_Pel = "NET_Pel";		
	//private static $sensor_BO_Pth = "BO_Pth";	
	
	public function getAirtemperatureName(){return self::$sensor_1_airtemperature_name;}
	public function getRelativehumidityName(){return self::$sensor_2_relativehumidity_name;}
	public function getAirpressureName(){return self::$sensor_3_airpressure_name;}
	public function getSolarradiationName(){return self::$sensor_4_solarradiation_name;}
	public function getEnergyproductionName(){return self::$sensor_5_energyproduction_name;}
	public function getPowerexchangednetworkName(){return self::$sensor_6_powerexchangednetwork_name;}
	public function getPowerexchangedfiammName(){return self::$sensor_7_powerexchangedfiamm_name;}
	public function getElectricaldualmodemicroturbineName(){return self::$sensor_8_electricaldualmodemicroturbine_name;}
	public function getElectricalgridmicroturbineName(){return self::$sensor_9_electricalgridmicroturbine_name;}
	public function getThermaldualmodemicroturbineName(){return self::$sensor_10_thermaldualmodemicroturbine_name;}
	public function getThermalgridmicroturbineName(){return self::$sensor_11_thermalgridmicroturbine_name;}
	public function getThermalboilersName(){return self::$sensor_12_thermalboilers_name;}
	
	//public function getPV_radName(){return self::$sensor_PV_rad;}
	//public function getPV_PelName(){return self::$sensor_PV_Pel;}
	//public function getCHP_C65B_PelName(){return self::$sensor_CHP_C65B_Pel;}
	//public function getCHP_C65_PelName(){return self::$sensor_CHP_C65_Pel;}
	//public function getCHP_STO_PelName(){return self::$sensor_STO_Pel;}
	//public function getNET_PelName(){return self::$sensor_NET_Pel;}
	//public function getCHP_BO_PthName(){return self::$sensor_BO_Pth;}
	
	public function getDataVariablesInput()
	{
		$aVariablesInput=array();
		
		$aVariablesInput[].=self::$sensor_1_airtemperature_name;
		$aVariablesInput[].=self::$sensor_2_relativehumidity_name;
		$aVariablesInput[].=self::$sensor_3_airpressure_name;
		$aVariablesInput[].=self::$sensor_4_solarradiation_name;
		$aVariablesInput[].=self::$sensor_5_energyproduction_name;
		$aVariablesInput[].=self::$sensor_6_powerexchangednetwork_name;
		$aVariablesInput[].=self::$sensor_7_powerexchangedfiamm_name;
		$aVariablesInput[].=self::$sensor_8_electricaldualmodemicroturbine_name;
		$aVariablesInput[].=self::$sensor_9_electricalgridmicroturbine_name;
		$aVariablesInput[].=self::$sensor_10_thermaldualmodemicroturbine_name;
		$aVariablesInput[].=self::$sensor_11_thermalgridmicroturbine_name;
		$aVariablesInput[].=self::$sensor_12_thermalboilers_name;
		
		//$aVariablesInput[].=self::$sensor_PV_rad;
		//$aVariablesInput[].=self::$sensor_PV_Pel;
		//$aVariablesInput[].=self::$sensor_CHP_C65B_Pel;
		//$aVariablesInput[].=self::$sensor_CHP_C65_Pel;
		//$aVariablesInput[].=self::$sensor_STO_Pel;
		//$aVariablesInput[].=self::$sensor_NET_Pel;
		//$aVariablesInput[].=self::$sensor_BO_Pth;
		
		return $aVariablesInput;
	}
	
	//Sensors\
	
	
    public function __construct(EntityManager $em)
    {
        $this->em=$em;
    }
	
    /*
     * Run the service
     * The result is an array containing
     *   - Input from sensors (e.g 'actual_humidity', 'air_temperature')
     *   - Feedback from TCV ('feedback')
     *   - The proposed temperature ('proposed_temperature')
     */
    public function getDataValues($idActionPlan, $idBuilding, $from, $to) {
        
		$from = $this->getDateString($from, 0)." 00:00:00"; // We ensure that we have datatime
		if($to == null){
			$to=\DateTime::createFromFormat('Y-m-d H:i:s', $from)->modify(" +6 day")->format("Y-m-d H:i:s");
		}else{
			$to = $this->getDateString($to, 0)." 00:00:00"; // We ensure that we have datatime
		}
		
		$loLstDays=$this->getDaysFromDate($from, $to);	// Returns an array of every day between two dates	
		$nDays=count($loLstDays);						// Number of days: should be 7 (days)	
		
		
		$sensors = array();
		$actionPlanSensors = $this->em->getRepository('OptimusOptimusBundle:APSensors')->findBy(array("fk_actionplan"=>$idActionPlan));
		foreach($actionPlanSensors as $actionPlanSensor) {
			$sensors[] = array("sensor"=>$actionPlanSensor->getFkSensor(),
							   "name"=>$actionPlanSensor->getName());
		}	
		
		//dump($sensors);
		
		$aDataActionPlan=array();
		
		// for each day from starting date to 6 more days ...
		for($iDay=0; $iDay < $nDays; $iDay++)
		{
			$load = array("0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0");
			$load_total = 0;
			$grid = array("0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0");
			$grid_total = 0;
			$res = array("0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0");
			$res_total = 0;
			$shaving = array("0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0");
			$load_original = array("0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0");
			$load_original_total = 0;
			$grid_original = array("0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0");
			$grid_original_total = 0;
			$storage = array("0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0");
			$ThA = array("0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0");
			$ThB = array("0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0");
			$Aon = array("0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0");
			$Bon = array("0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0");
			
				
			if($iDay>0)
            {
                $currentDay=\DateTime::createFromFormat('Y-m-d H:i:s', $from);
                if(!$currentDay){
                    $currentDay=\DateTime::createFromFormat('Y-m-d', $from);
                }
                $currentDay=$currentDay->modify(" +".$iDay." day")->format("Y-m-d H:i:s");					
            }
            else {
                $currentDay=$from;
            }
		
			$lsAbbreviatedDay=\DateTime::createFromFormat("Y-m-d H:i:s", $loLstDays[$iDay]);
			$lsAbbreviatedDayFinal = $lsAbbreviatedDay;
			$lsAbbreviatedDayFinal = $lsAbbreviatedDayFinal->format('d-m');
			$nameAbbreviatedDay = $lsAbbreviatedDay->format('D');
			
			$idCalculation=0;
			$idOutputDay=0;
			$statusDay=0;
			
			$qCalculation=$this->em->getRepository('OptimusOptimusBundle:APCalculation')->findCalculationByDate($loLstDays[$iDay], $idActionPlan);
			if(!empty($qCalculation)) 
			{
				try 
				{
					$idCalculation=$qCalculation[0]->getId();
					$outputDay = $this->em->getRepository('OptimusOptimusBundle:APFlowsOutputDay')->findOutputByDay($idCalculation, $loLstDays[$iDay]); //
					//dump($outputDay);
					if($outputDay)
					{
						$idOutputDay=$outputDay[0]->getId();		// 1, 2....
						$statusDay=$outputDay[0]->getStatus();		// 0=Unknown, 1=Accepted, 2=Declined 	
					}
				} 
				catch (Exception $e) 
				{
					//echo 'ExcepciÃ³n capturada: ',  $e->getMessage(), "\n";
					continue;
				}
			}
			
			$dataHourly = $this->getDataValuesCalculated($currentDay, $idActionPlan);
			//dump($dataHourly);
			//print_r($dataHourly);
			if($dataHourly != null){
				for($iHour=0; $iHour < 24; $iHour++){
					$load[$iHour] = $dataHourly[$iHour]['load'];
					$grid[$iHour] = $dataHourly[$iHour]['grid'];
					$res[$iHour] = $dataHourly[$iHour]['res'];
					$shaving[$iHour] = $dataHourly[$iHour]['shaving'];
					$load_original[$iHour] = $dataHourly[$iHour]['load_original'];
					$grid_original[$iHour] = $dataHourly[$iHour]['grid_original'];
					$storage[$iHour] = $dataHourly[$iHour]['storage'];
					$ThA[$iHour] = $dataHourly[$iHour]['ThA'];
					$ThB[$iHour] = $dataHourly[$iHour]['ThB'];
					$Aon[$iHour] = $dataHourly[$iHour]['Aon'];
					$Bon[$iHour] = $dataHourly[$iHour]['Bon'];
					
					$load_total += $dataHourly[$iHour]['load'];
					$load_original_total += $dataHourly[$iHour]['load_original'];
					$grid_total += $dataHourly[$iHour]['grid'];
					$grid_original_total += $dataHourly[$iHour]['grid_original'];
					$res_total += $dataHourly[$iHour]['res'];
				}
			}
			
			
			$aDataActionPlan[]=array("day"=>explode(" ", $loLstDays[$iDay])[0], 
									 "load"=>$load,
									 "grid"=>$grid,
									 "res"=>$res,
									 "shaving"=>$shaving,
									 "load_original"=>$load_original,
									 "grid_original"=>$grid_original,
									 "storage"=>$storage,
									 "ThA"=>$ThA,
									 "ThB"=>$ThB,
									 "Aon"=>$Aon,
									 "Bon"=>$Bon,
									 "load_total"=>$load_total, 							// Totals	
									 "grid_total"=>$grid_total, 							// Totals
									 "res_total"=>$res_total, 								// Totals
									 "load_original_total"=>$load_original_total, 			// Totals	
									 "grid_original_total"=>$grid_original_total, 			// Totals
									 "idOutputDay"=>$idOutputDay,
									 "statusDay"=>$statusDay,
									 "nameAbbreviatedDay"=>$nameAbbreviatedDay,
									 "abbreviatedDay"=>$lsAbbreviatedDayFinal); 
		}
		
		
       
        return $aDataActionPlan;
    }
	
	
	
	private function getDataValuesCalculated($sCurrentDay, $idActionPlan)
	{
		$ret = array();
		
		$calculations = $this->em->getRepository('OptimusOptimusBundle:APCalculation')->findAllCalculationsByDate($sCurrentDay, $idActionPlan);
		if($calculations != null){
			if(Count($calculations)> 0){
				foreach ($calculations as $calculation) {
					$idCalculation=$calculation->getId();
					$currentDay=\DateTime::createFromFormat('Y-m-d H:i:s', $sCurrentDay);
					$output = $this->em->getRepository('OptimusOptimusBundle:APFlowsOutput')->findFlowsOutputsByDate($idCalculation, $currentDay->format('Y-m-d H:i:s'));
					if($output != null){
						if(Count($output) > 0){
							foreach($output as $aOutput){
								$ret[] = array( "hour"=>$aOutput->getHour_timestamp(),
												"load"=>$aOutput->getLoad_value(),
												"grid"=>$aOutput->getGrid(),	
												"res"=>$aOutput->getRes(),							
												"shaving"=>$aOutput->getShaving(),							
												"load_original"=>$aOutput->getLoad_original(),							
												"grid_original"=>$aOutput->getGrid_original(),		
												"ThA"=>$aOutput->getThA(),							
												"ThB"=>$aOutput->getThB(),	
												"Aon"=>$aOutput->getAon(),							
												"Bon"=>$aOutput->getBon(),	
												"storage"=>$aOutput->getStorage() );
							}
							return $ret;
						}
					}
				}
			}
		}
			
		return null; // Not defined
	}
	
	//GET Status & colors action plan	
	public function getTrafficLight($idActionPlan, $dateActual, $startDate, $endDate)
	{
		
		$initDay=$startDate->format("Y-m-d H:i:s");
		//$finalDay=$endDate->modify('-2 day')->format("Y-m-d H:i:s");
		$finalDay=$endDate->format("Y-m-d H:i:s");
		$actDay=$dateActual->format("Y-m-d H:i:s");
				
		$aDays=$this->getDaysFromDate($initDay, $finalDay);		
		$numDays=count($aDays);								
		$aDataActionPlan=array();
		$aFinalValues=array();
			
		
		for($i=0; $i < $numDays; $i++)
		{
			$qCalculation=$this->em->getRepository('OptimusOptimusBundle:APCalculation')->findCalculationByDate($aDays[$i], $idActionPlan);
			$currentDayFormat=explode(" ", $aDays[$i])[0];
			
			
			if($qCalculation != null)
			{
				$idCalculation=$qCalculation[0]->getId();			
					
				$outputDay = $this->em->getRepository('OptimusOptimusBundle:APFlowsOutputDay')->findOutputByDay($idCalculation, $currentDayFormat); 
				
				if($outputDay)
				{
					
					if($aDays[$i] < $actDay)
					{
						$status=$outputDay[0]->getStatus();
						if($status==0) 		$color="#ffff00";
						elseif($status==1)	$color="#00ff00";
						elseif($status==2)	$color="#ff0000";
						$aDataActionPlan[]=array("status"=>$color, "date"=>$aDays[$i]);			// 0=Unknown, 1=Accepted, 2=Declined 
					}elseif($aDays[$i] >= $actDay)
					{
						$status=$outputDay[0]->getStatus();
						if($status==0) 		$color="#cccccc";
						elseif($status==1)	$color="#00ff00";
						elseif($status==2)	$color="#ff0000";
						
						$aDataActionPlan[]=array("status"=>$color, "date"=>$aDays[$i]);
					}
				}else{					
					$aDataActionPlan[]=array("status"=>"#ffff00", "date"=>$aDays[$i]);
				}
			}else{
				$aDataActionPlan[]=array("status"=>"#ffff00", "date"=>$aDays[$i]);
			}
		}
		
		$numUnk=$this->calculateUnknowns($aDataActionPlan, $dateActual);
		
		//if($numUnk == 0) 		$strStatus=0;
		if($numUnk > 1)			$strStatus=1;
		else					$strStatus=2;
		
		$aFinalValues[]=array("aOutputActionPlan"=>$aDataActionPlan, "status"=>$strStatus);
		
		//dump($aFinalValues);
		
		return $aFinalValues;
		
	}
	
	//Get number of unknows 
	private function calculateUnknowns($aDataActionPlan, $dateActual)
	{
		$actDay=$dateActual->format("Y-m-d");
		$numUnk=0;
		foreach($aDataActionPlan as $dayActionPlan)
		{
			$currentDay=explode(" ", $dayActionPlan['date'])[0];
			
			//dump($currentDay);
			//dump($actDay);
			
			if($currentDay <= $actDay and $dayActionPlan['status']=="#ff0000")
			{
				//dump("mas pequeÃ±o y rojo");
				$numUnk++;
			}
			
		}
		
		return $numUnk;
	}
	
	private function getDateString($from, $iDay)
	{
		$currentDay=\DateTime::createFromFormat('Y-m-d H:i:s', $from);
		if(!$currentDay){
			$currentDay=\DateTime::createFromFormat('Y-m-d', $from);
		}
		return $currentDay->modify(" +".$iDay." day")->format("Y-m-d");
	}
	
	
	// Returns an array of every day between two dates:
	private function getDaysFromDate($from, $to)
	{
		$aDays=array();
		$aDays[0]=$from;
		for($i=1; $i<7; $i++)
		{
			$actDay=\DateTime::createFromFormat('Y-m-d H:i:s', $from);
			$act=$actDay->modify(" +".$i." day")->format("Y-m-d H:i:s");
			if(($act) < $to){
				$aDays[$i]=$act;
			} else {
				break;
			}
		}		
		$aDays[$i]=$to;		
		
		return $aDays;
	}

	//Get Status week 
	public function getStatusWeek($idActionPlan, $startDate, $endDate)
	{
		$initDay=$startDate." 00:00:00";
		$finalDay=\DateTime::createFromFormat('Y-m-d H:i:s', $endDate." 00:00:00")->modify("+1 day")->format("Y-m-d H:i:s");
		
		$aDays=$this->getDaysFromDate($initDay, $finalDay);		
		$numDays=count($aDays);
		$aStatusWeek=array();

		for($i=0; $i < $numDays; $i++)
		{
			$qCalculation=$this->em->getRepository('OptimusOptimusBundle:APCalculation')->findCalculationByDate($aDays[$i], $idActionPlan);
			$currentDayFormat=explode(" ", $aDays[$i])[0];
			
			
			if($qCalculation != null)
			{
				$idCalculation=$qCalculation[0]->getId();			
					
				$outputDay = $this->em->getRepository('OptimusOptimusBundle:APFlowsOutputDay')->findOutputByDay($idCalculation, $currentDayFormat); 
				
				if($outputDay)
				{
					$aStatusWeek[]=array('status'=>$outputDay[0]->getStatus(), 'idOutputDay'=>$outputDay[0]->getId());
					
				}else	$aStatusWeek[]=array('status'=>0, 'idOutputDay'=>0);
				
			}else	$aStatusWeek[]=array('status'=>0, 'idOutputDay'=>0);
		}
		
		return $aStatusWeek;
	}

}
?>
