<?php

namespace Optimus\OptimusBundle\Controller;

use Symfony\Bundle\FrameworkBundle\Controller\Controller;

class SetPointPlanController extends Controller
{
    public function set_pointAction($idBuilding, $idAPType, $start_date = '')
    {        
        $result = array();

        $result['idBuilding'] = $idBuilding;

        //create an object Datetime of the current date
        $curr_date = new \DateTime();

        /*Set dates*/
        //The start date can either be the current date
        if ($start_date == '') {
            //create the start of the displayed week (starting from curr_date) in the appropriate format
            $result['startDate'] = $curr_date->format("Y-m-d");
            //create the end of the current week (starting from the current date) as object DateTime
            $result['currDate'] = \DateTime::createFromFormat('Y-m-d', $result['startDate'])->modify("+6 day")->format("Y-m-d");
        } //or it can be given via the URL
        else {
            $start_date = new \DateTime($start_date);
            //create the start of the displayed week (starting from start_date) in the appropriate format
            $result['startDate'] = $start_date->format("Y-m-d");
            //create the end of the current week (starting from the current date) as object DateTime
            $result['currDate'] = \DateTime::createFromFormat('Y-m-d', $curr_date->format("Y-m-d"))->modify("+6 day")->format("Y-m-d");
        }

        //create the start of the previous week (starting from startDate - 7 days) in the appropriate format
        $prev_week_start = \DateTime::createFromFormat('Y-m-d', $result['startDate'])->modify("-7 day")->format("Y-m-d");
        //create the end of the current week (startDate + 6 days) in the appropriate format
        $result['endDate'] = \DateTime::createFromFormat('Y-m-d', $result['startDate'])->modify("+6 day")->format("Y-m-d");

         
		
		$result['nameBuilding']=$this->get('service_data_capturing')->getNameBuilding($idBuilding);
		$result['idAPType']=$idAPType;
		
		// 1. Get info from the Action Plan (DB)
		$em = $this->getDoctrine()->getManager();
		$actionPlan=$em->getRepository('OptimusOptimusBundle:ActionPlans')->findBy(array("fk_Building"=>$idBuilding, "type"=>$idAPType));
		
		if($actionPlan != null)
		{
			// 2. Get info from data capturing module (config file -> service):
			$idActionPlan=$actionPlan[0]->getId();
			
			$result['idActionPlan']=$idActionPlan;
			$result['dataActionPlan_name'] = $actionPlan[0]->getName();
			$result['dataActionPlan_description'] = $actionPlan[0]->getDescription();
			$result['dataActionPlan_lastCalculation']=$this->get('service_data_capturing')->getLastCalculated($idActionPlan);
			
			set_time_limit(0);
			
			
			
			$result['result'] = $this->get('service_apspmp')->getResults($idBuilding, $result['startDate'], $prev_week_start);
		}
        
		
		// render the template
        return $this->render('OptimusOptimusBundle:Set_point_tempActionPlan:setpoint_plan.html.twig', $result);
    }
	
	public function newCalculateSetPointManagementAction($idBuilding, $idAPType, $from='', $to='')
	{
		//dump($idAPType);
		//event
		$em = $this->getDoctrine()->getManager();
		$user=$em->getRepository('OptimusOptimusBundle:Users')->find($this->container->get('security.context')->getToken()->getUser()->getId());
		$ip=$this->container->get('request_stack')->getCurrentRequest()->getClientIp();
	
		$this->get('service_calculo')->createPredictionAndCalculates($from, $idBuilding, $ip, $user); // <--- !!!!!!! TEMP
		return $this->indexAction($idBuilding, $idAPType, $from);
	}
}
?>